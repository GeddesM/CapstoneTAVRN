{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\OneDrive\\\\Desktop\\\\chat final\\\\src\\\\components\\\\PrivateMessaging.js\";\nimport React, { Component } from 'react';\nimport Moment from 'moment';\nexport default class PrivateMessaging extends Component {\n  constructor() {\n    super();\n\n    this.scrollDown = () => {\n      const {\n        chat_container\n      } = this.refs;\n      chat_container.scrollTop = chat_container.scrollHeight;\n    };\n\n    this.sendTyping = () => {\n      this.lastUpdateTime = Date.now();\n\n      if (!this.state.isTyping) {\n        this.setState({\n          isTyping: true\n        });\n        this.props.userTyping(true);\n        this.startCheckTyping();\n      }\n    };\n\n    this.startCheckTyping = () => {\n      this.typingInterval = setInterval(() => {\n        if (Date.now() - this.lastUpdateTime > 300) {\n          this.setState({\n            isTyping: false\n          });\n          this.stopCheckTyping();\n        }\n      }, 300);\n    };\n\n    this.stopCheckTyping = () => {\n      if (this.typingInterval) {\n        clearInterval(this.typingInterval);\n        this.props.userTyping(false);\n      }\n    };\n\n    this.state = {\n      isTyping: false\n    };\n  } // Scrolls down to the bottom of chat log for most recent messages\n\n\n  componentDidMount() {\n    this.scrollDown();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.scrollDown();\n  } // If there are active intervals running, we clear them on dismount\n\n\n  componentWillUnmount() {\n    this.stopCheckTyping();\n  }\n\n  render() {\n    const {\n      handlePrivateInput,\n      handlePrivateSubmit,\n      closePM,\n      currentPrivateRecipient,\n      privateMessageLog,\n      socketPMs,\n      privateMessageInput,\n      showTyping,\n      activeUserTyping,\n      username\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"private__message--window\",\n      onClick: e => {\n        e.stopPropagation();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chatapp__chatbox\",\n      id: \"private__message--input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: e => {\n        closePM(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"\\uF00D\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Conversation with \", currentPrivateRecipient.username), React.createElement(\"div\", {\n      className: \"chatapp__chatbox--messages\",\n      id: \"private__chatbox\",\n      ref: \"chat_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, privateMessageLog.length ? React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, privateMessageLog.map((message, index) => {\n      return React.createElement(\"li\", {\n        className: username !== message.author[0].item.username ? \"chat--received\" : null,\n        key: `chatMsgId-${index}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"speech--bubble--author\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, username === message.author[0].item.username ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"You\") : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, message.author[0].item.username), React.createElement(\"p\", {\n        className: \"speech--bubble--date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, Moment(message.createdAt).fromNow())), React.createElement(\"div\", {\n        className: \"speech--bubble\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, message.body)));\n    })) : null, socketPMs.length ? React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, socketPMs.map((message, index) => {\n      return React.createElement(\"li\", {\n        className: username !== message.author[0].item.username ? \"chat--received\" : null,\n        key: `socketPMsId-${index}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"speech--bubble--author\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, username === message.author[0].item.username ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"You\") : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, message.author[0].item.username), React.createElement(\"p\", {\n        className: \"speech--bubble--date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, Moment(message.createdAt).fromNow())), React.createElement(\"div\", {\n        className: \"speech--bubble\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, message.body)));\n    })) : null, activeUserTyping !== this.props.username ? React.createElement(\"div\", {\n      className: \"active__typing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, showTyping ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, `${activeUserTyping} is typing...`) : null) : null), React.createElement(\"form\", {\n      onSubmit: handlePrivateSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: handlePrivateInput,\n      value: privateMessageInput,\n      name: \"privateMessageInput\",\n      type: \"text\",\n      placeholder: \"Write a message\",\n      autoComplete: \"off\",\n      onKeyUp: e => {\n        e.keyCode !== 13 && this.sendTyping();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/chris/OneDrive/Desktop/chat final/src/components/PrivateMessaging.js"],"names":["React","Component","Moment","PrivateMessaging","constructor","scrollDown","chat_container","refs","scrollTop","scrollHeight","sendTyping","lastUpdateTime","Date","now","state","isTyping","setState","props","userTyping","startCheckTyping","typingInterval","setInterval","stopCheckTyping","clearInterval","componentDidMount","componentDidUpdate","prevProps","prevState","componentWillUnmount","render","handlePrivateInput","handlePrivateSubmit","closePM","currentPrivateRecipient","privateMessageLog","socketPMs","privateMessageInput","showTyping","activeUserTyping","username","e","stopPropagation","length","map","message","index","author","item","createdAt","fromNow","body","keyCode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Moment from 'moment';\r\n\r\nexport default class PrivateMessaging extends Component{\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      isTyping: false,\r\n    }\r\n  }\r\n\r\n  // Scrolls down to the bottom of chat log for most recent messages\r\n  scrollDown = () => {\r\n    const { chat_container } = this.refs;\r\n    chat_container.scrollTop = chat_container.scrollHeight;\r\n  }\r\n\r\n  // Checks if the user is typing, if they are, it sets the state of isTyping to true,\r\n  // then it calls the startCheckTyping function\r\n  // Tells server sockets, that someone is typing.\r\n  sendTyping = () => {\r\n    this.lastUpdateTime = Date.now();\r\n\r\n    if (!this.state.isTyping) {\r\n      this.setState({\r\n        isTyping: true\r\n      })\r\n      this.props.userTyping(true)\r\n      this.startCheckTyping();\r\n    }\r\n  }\r\n\r\n  // Sets up intervals which will set the typing to false, if there is no typing after 300ms,\r\n  // it sets state of isTyping to false and calls the stopCheckTyping function\r\n  startCheckTyping = () => {\r\n    this.typingInterval = setInterval(() => {\r\n      if((Date.now() - this.lastUpdateTime) > 300) {\r\n        this.setState({\r\n          isTyping: false\r\n        });\r\n        this.stopCheckTyping();\r\n      }\r\n    }, 300)\r\n  }\r\n\r\n  // If there are active intervals running, it clears them and sends the socket that no more user is typing\r\n  stopCheckTyping = () => {\r\n    if (this.typingInterval) {\r\n      clearInterval(this.typingInterval)\r\n      this.props.userTyping(false);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.scrollDown();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    this.scrollDown();  \r\n  }\r\n\r\n  // If there are active intervals running, we clear them on dismount\r\n  componentWillUnmount() {\r\n    this.stopCheckTyping();\r\n  }\r\n\r\n  render() {\r\n    const { handlePrivateInput, handlePrivateSubmit, closePM, currentPrivateRecipient, privateMessageLog, socketPMs, privateMessageInput, showTyping, activeUserTyping, username } = this.props;\r\n\r\n    return (\r\n      <div className=\"private__message--window\"  onClick={((e) =>{e.stopPropagation()})}>\r\n        <div className=\"chatapp__chatbox\" id=\"private__message--input\">\r\n          <button onClick={(e) => {closePM(e)}}>&#xf00d;</button>\r\n          <p>Conversation with {currentPrivateRecipient.username}</p>\r\n          <div className=\"chatapp__chatbox--messages\" id=\"private__chatbox\" ref=\"chat_container\">\r\n          {\r\n            (privateMessageLog.length)\r\n              ? <ul>\r\n                    {privateMessageLog.map((message, index) => {\r\n                      return (\r\n                        <li className={(username !== message.author[0].item.username) ? \"chat--received\" : null} key={`chatMsgId-${index}`}>\r\n                          <div className=\"speech--bubble--author\">\r\n                            {\r\n                              (username === message.author[0].item.username)\r\n                                ? <p>You</p>\r\n                                : <p>{message.author[0].item.username}</p>\r\n                            }\r\n                            <p className=\"speech--bubble--date\">{Moment(message.createdAt).fromNow()}</p>\r\n                          </div>\r\n                          <div className=\"speech--bubble\">\r\n                            <p>{message.body}</p>\r\n                          </div>\r\n                        </li>\r\n                      )\r\n                    })}\r\n                </ul>\r\n              : null\r\n          }\r\n          {\r\n            (socketPMs.length)\r\n              ? <ul>\r\n                  {socketPMs.map((message, index) => {\r\n                    return (\r\n                      <li className={(username !== message.author[0].item.username) ? \"chat--received\": null} key={`socketPMsId-${index}`}>\r\n                        <div className=\"speech--bubble--author\">\r\n                          {\r\n                            (username === message.author[0].item.username)\r\n                              ? <p>You</p>\r\n                              : <p>{message.author[0].item.username}</p>\r\n                          }\r\n                          <p className=\"speech--bubble--date\">{Moment(message.createdAt).fromNow()}</p>\r\n                        </div>\r\n                        <div className=\"speech--bubble\">\r\n                          <p>{message.body}</p>\r\n                        </div>\r\n                      </li>\r\n                    )\r\n                  })}\r\n                </ul>\r\n              : null\r\n          }\r\n          {\r\n            (activeUserTyping !== this.props.username)\r\n              ? <div className=\"active__typing\">\r\n                  {\r\n                    (showTyping)\r\n                      ? <p>\r\n                        {`${activeUserTyping} is typing...`}\r\n                        </p>\r\n                      : null\r\n                  }\r\n                </div>\r\n              : null\r\n          }\r\n          </div>\r\n          <form onSubmit={handlePrivateSubmit}>\r\n            <input \r\n            onChange={handlePrivateInput} \r\n            value={privateMessageInput} \r\n            name=\"privateMessageInput\" \r\n            type=\"text\" \r\n            placeholder=\"Write a message\" \r\n            autoComplete=\"off\"\r\n            onKeyUp= { e => { e.keyCode !== 13 && this.sendTyping()} }\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  } \r\n}"]},"metadata":{},"sourceType":"module"}