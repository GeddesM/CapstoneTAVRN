{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\OneDrive\\\\Desktop\\\\chat final\\\\src\\\\components\\\\container\\\\ChatUIContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LoginForm from '../LoginForm';\nimport RegisterForm from '../RegisterForm';\nimport { withCookies } from 'react-cookie';\nimport axios from 'axios';\nimport Navigation from '../Navigation';\nimport ChatBox from '../ChatBox';\nimport ChatSelector from '../ChatSelector';\nimport io from 'socket.io-client';\nimport Moment from 'moment';\nimport PrivateMessagingContainer from './PrivateMessageContainer';\nconst API_URL = 'http://localhost:3000/api';\nconst SOCKET_URL = \"http://localhost:3000\";\nconst socket = io(SOCKET_URL);\n\nclass ChatUIContainer extends Component {\n  constructor() {\n    super();\n\n    this.initSocket = () => {\n      this.setState({\n        socket\n      });\n      socket.on('refresh messages', data => {\n        const newSocketConversations = Array.from(this.state.socketConversations);\n        newSocketConversations.push(data);\n        this.setState({\n          socketConversations: newSocketConversations\n        });\n      });\n      socket.on('user joined', data => {\n        const userJoined = Array.from(this.state.socketConversations);\n        userJoined.push({\n          userJoined: data\n        });\n        this.setState({\n          socketConversations: userJoined\n        });\n      });\n      socket.on('user left', data => {\n        const userJoined = Array.from(this.state.socketConversations);\n        userJoined.push({\n          userJoined: data\n        });\n        this.setState({\n          socketConversations: userJoined\n        });\n      });\n    };\n\n    this.hasToken = () => {\n      const {\n        cookies\n      } = this.props;\n      const token = cookies.get('token');\n      const guestToken = cookies.get('guestToken');\n      const tokenUser = cookies.get('user');\n      const tokenGuestUser = cookies.get('guestUser');\n      const usersChannels = cookies.get('usersChannels');\n      const currentChannel = cookies.get('channel');\n\n      if (token) {\n        this.setState({\n          username: tokenUser.username,\n          guestUsername: \"\",\n          guestSignup: \"\",\n          id: tokenUser._id,\n          token,\n          usersChannels,\n          currentChannel: currentChannel || \"Public-Main\",\n          formsMethod: \"\",\n          formsShown: false\n        });\n      } else if (guestToken) {\n        this.setState({\n          guestUsername: tokenGuestUser,\n          token: guestToken,\n          formsMethod: \"\",\n          formsShown: false\n        });\n      }\n    };\n\n    this.setUsername = () => {\n      const username = this.state.username;\n      const guestUsername = this.state.guestUsername;\n\n      if (!username) {\n        return guestUsername;\n      } else {\n        return username;\n      }\n    };\n\n    this.userLogout = () => {\n      const {\n        cookies\n      } = this.props;\n      const currentChannel = this.state.currentChannel;\n      cookies.remove('token', {\n        path: '/'\n      });\n      cookies.remove('user', {\n        path: '/'\n      });\n      cookies.remove('guestToken', {\n        path: \"/\"\n      });\n      cookies.remove('guestUser', {\n        path: \"/\"\n      });\n      cookies.remove('usersChannels', {\n        path: \"/\"\n      });\n      cookies.remove('channel', {\n        path: \"/\"\n      });\n      socket.emit('leave channel', currentChannel, this.setUsername());\n      this.setState({\n        username: \"\",\n        id: \"\",\n        guestUsername: \"\",\n        token: \"\",\n        usersChannels: [],\n        socketConversations: [],\n        guestSignup: \"\",\n        currentChannel: \"Public-Main\",\n        formsMethod: \"login\",\n        formsShown: true\n      });\n    };\n\n    this.userRegistration = ({\n      username,\n      password\n    }) => {\n      const {\n        cookies\n      } = this.props;\n      const currentChannel = this.state.currentChannel;\n      axios.post(`${API_URL}/auth/register`, {\n        username,\n        password\n      }).then(res => {\n        cookies.set('token', res.data.token, {\n          path: \"/\",\n          maxAge: 7200\n        });\n        cookies.set('user', res.data.user, {\n          path: \"/\",\n          maxAge: 7200\n        });\n        cookies.set('usersChannels', res.data.user.usersChannels, {\n          path: \"/\",\n          maxAge: 7200\n        });\n        this.setState({\n          username: res.data.user.username,\n          id: res.data.user._id,\n          registrationError: [],\n          token: res.data.token,\n          formsShown: false,\n          guestUsername: \"\",\n          guestSignup: \"\",\n          usersChannels: res.data.user.usersChannels,\n          formsMethod: \"\"\n        }, () => {\n          // Tells the backend sockets that a user has entered a channel\n          socket.emit('enter channel', currentChannel, this.setUsername());\n        });\n      }).catch(error => {\n        // Always show most recent errors\n        const errorLog = Array.from(this.state.registrationError);\n        errorLog.length = [];\n        errorLog.push(error);\n        this.setState({\n          registrationError: errorLog\n        });\n      });\n    };\n\n    this.getChannelConversations = () => {\n      axios.get(`${API_URL}/chat/channel/${this.state.currentChannel}`).then(res => {\n        const currentChannel = this.state.currentChannel;\n        socket.emit('enter channel', currentChannel, this.setUsername());\n        this.setState({\n          channelConversations: res.data.channelMessages\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.getUsersConversations = () => {\n      axios.get(`${API_URL}/chat`, {\n        headers: {\n          Authorization: this.state.token\n        }\n      }).then(res => {\n        const updatedUsersDirectMessages = res.data.conversationsWith;\n        this.setState({\n          usersDirectMessages: updatedUsersDirectMessages || []\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.sendMessage = (composedMessage, recipient) => {\n      const socket = this.state.socket;\n      const currentChannel = this.state.currentChannel;\n      axios.post(`${API_URL}/chat/postchannel/${this.state.currentChannel}`, {\n        composedMessage\n      }, {\n        headers: {\n          Authorization: this.state.token\n        }\n      }).then(res => {\n        const socketMsg = {\n          composedMessage,\n          channel: currentChannel,\n          author: this.state.guestUsername || this.state.username,\n          date: Moment().format()\n        };\n        socket.emit('new message', socketMsg);\n        this.setState({\n          composedMessage: \"\"\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.sendMessage(this.state.composedMessage);\n    };\n\n    this.createChannel = e => {\n      const {\n        cookies\n      } = this.props;\n      const createInput = this.state.createInput;\n      e.preventDefault();\n      axios.post(`${API_URL}/user/addchannel`, {\n        createInput\n      }, {\n        headers: {\n          Authorization: this.state.token\n        }\n      }).then(res => {\n        const updatedUsersChannels = Array.from(this.state.usersChannels);\n        updatedUsersChannels.push(this.state.createInput);\n        cookies.set('usersChannels', updatedUsersChannels, {\n          path: \"/\",\n          maxAge: 7200\n        });\n        this.setState({\n          socketConversations: [],\n          currentChannel: createInput,\n          usersChannels: updatedUsersChannels\n        }, () => {\n          this.getChannelConversations();\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.removeChannel = channel => {\n      const {\n        cookies\n      } = this.props;\n      axios.post(`${API_URL}/user/removechannel`, {\n        channel\n      }, {\n        headers: {\n          Authorization: this.state.token\n        }\n      }).then(res => {\n        const updatedChannels = res.data.updatedChannels;\n        cookies.set('usersChannels', updatedChannels, {\n          path: \"/\",\n          maxAge: 7200\n        });\n        this.joinChannel(\"Tavrn\");\n        this.setState({\n          socketConversations: [],\n          usersChannels: updatedChannels\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.joinChannel = channel => {\n      const {\n        cookies\n      } = this.props;\n      cookies.set('channel', channel, {\n        path: \"/\",\n        maxAge: 7200\n      });\n      this.setState({\n        socketConversations: [],\n        currentChannel: channel\n      }, () => {\n        this.getChannelConversations();\n      });\n    };\n\n    this.startConversation = e => {\n      const startDmInput = this.state.startDmInput;\n      const usersDirectMessages = this.state.usersDirectMessages;\n      e.preventDefault();\n      const checkForCurrentConvos = usersDirectMessages.filter(directMessage => {\n        return directMessage.username === startDmInput;\n      }); // Checks if already in current conversation with that person\n\n      if (!checkForCurrentConvos.length || !usersDirectMessages.length) {\n        axios.post(`${API_URL}/chat/new`, {\n          startDmInput\n        }, {\n          headers: {\n            Authorization: this.state.token\n          }\n        }).then(res => {\n          const newUsersDirectMessages = Array.from(this.state.usersDirectMessages);\n          newUsersDirectMessages.push({\n            username: res.data.recipient,\n            _id: res.data.recipientId\n          });\n          this.setState({\n            usersDirectMessages: newUsersDirectMessages,\n            directMessageErrorLog: []\n          });\n        }).catch(err => {\n          const updatedErrorLog = Array.from(this.state.directMessageErrorLog);\n          updatedErrorLog.push(err);\n          this.setState({\n            directMessageErrorLog: updatedErrorLog\n          });\n        });\n      } else {\n        const updatedErrorLog = Array.from(this.state.directMessageErrorLog);\n        updatedErrorLog.push({\n          //Had to emulate response from backend for error the alert component\n          response: {\n            data: {\n              error: 'Already in conversation with that person.'\n            }\n          }\n        });\n        this.setState({\n          directMessageErrorLog: updatedErrorLog\n        });\n      }\n    };\n\n    this.leaveConversation = (conversationId, user) => {\n      axios.post(`${API_URL}/chat/leave`, {\n        conversationId\n      }, {\n        headers: {\n          Authorization: this.state.token\n        }\n      }).then(res => {\n        const directMessages = Array.from(this.state.usersDirectMessages);\n        const newDirectMessages = directMessages.filter(directMessages => {\n          return directMessages.username !== user;\n        });\n        this.setState({\n          usersDirectMessages: newDirectMessages\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.choosePrivateMessageRecipient = recipient => {\n      this.setState({\n        currentPrivateRecipient: recipient\n      });\n    };\n\n    this.displayForms = method => {\n      if (method === \"login\") {\n        this.setState({\n          loginError: [],\n          formsMethod: \"login\",\n          formsShown: true,\n          guestUsername: \"\"\n        });\n      }\n\n      if (method === \"register\") {\n        this.setState({\n          formsMethod: \"register\",\n          formsShown: true,\n          guestUsername: \"\"\n        });\n      }\n\n      if (method === \"close\") {\n        this.setState({\n          formsMethod: \"\",\n          formsShown: false\n        });\n      }\n    };\n\n    this.closeForm = () => {\n      this.setState({\n        formsMethod: \"guest\",\n        formsShown: false\n      });\n    };\n\n    this.closePM = e => {\n      e.stopPropagation();\n      this.setState({\n        currentPrivateRecipient: {}\n      });\n    };\n\n    this.userLogin = this.userLogin.bind(this);\n    this.guestLogin = this.guestLogin.bind(this);\n    this.state = {\n      username: \"\",\n      id: \"\",\n      loginError: [],\n      registrationError: [],\n      formsShown: false,\n      formsMethod: \"guest\",\n      chatsShown: false,\n      socket: null,\n      composedMessage: \"\",\n      currentChannel: \"Tavrn\",\n      conversations: [],\n      channelConversations: [],\n      guestSignup: \"\",\n      guestUsername: \"\",\n      socketConversations: [],\n      usersChannels: [],\n      createInput: \"\",\n      startDmInput: \"\",\n      usersDirectMessages: [],\n      directMessageErrorLog: [],\n      currentPrivateRecipient: {},\n      token: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // Logs user or guest in if they have a token after refreshing or revisiting page.\n    this.hasToken(); // Initialize the socket listeners for events from the backend\n\n    this.initSocket(); // Get current channels messages\n\n    this.getChannelConversations();\n  } // Sets up socket listeners to listen for when to refresh messages, when a new user has joined,\n  // or when a user has left the channel\n\n\n  componentDidUpdate(prevProps, prevState) {\n    // Tells socket when a user has left channel by comparing against previous and new channel states\n    if (prevState.currentChannel !== this.state.currentChannel) {\n      socket.emit('leave channel', prevState.currentChannel, this.setUsername());\n    }\n  } // If a token can be found, it will populate back the user's information on browser refresh\n\n\n  // Takes a username and password\n  // POST calls to the backend api with that information\n  // If the login is successful, cookies are set with the token, user's data, and their channels\n  async userLogin({\n    username,\n    password\n  }) {\n    const {\n      cookies\n    } = this.props;\n    const currentChannel = this.state.currentChannel;\n\n    try {\n      const userData = await axios.post(`${API_URL}/auth/login`, {\n        username,\n        password\n      });\n      cookies.set('token', userData.data.token, {\n        path: \"/\",\n        maxAge: 7200\n      });\n      cookies.set('user', userData.data.user, {\n        path: \"/\",\n        maxAge: 7200\n      });\n      cookies.set('usersChannels', userData.data.user.usersChannels, {\n        path: \"/\",\n        maxAge: 7200\n      });\n      this.setState({\n        guestUsername: \"\",\n        username: userData.data.user.username,\n        formsShown: false,\n        token: userData.data.token,\n        id: userData.data.user._id,\n        loginError: [],\n        guestSignup: \"\",\n        usersChannels: userData.data.user.usersChannels,\n        formsMethod: \"\"\n      }, () => {\n        // After the login state is set, tell the backend sockets that a new user has entered\n        socket.emit('enter channel', currentChannel, this.setUsername());\n      });\n    } catch (error) {\n      const errorLog = Array.from(this.state.loginError); // Always show most recent errors\n\n      errorLog.length = [];\n      errorLog.push(error);\n      this.setState({\n        loginError: errorLog\n      });\n    }\n  } // On logout, remove all cookies that were saved and emit to the backend socket listener\n  // that a user has left the current channel.\n  // Sets the state back to fresh\n\n\n  // Guest signup, on successful POST call to our api, it returns a token and guest's data\n  // Saves the token and guestname as cookies \n  async guestLogin(e) {\n    e.preventDefault();\n    const {\n      cookies\n    } = this.props;\n    const guestInputName = this.state.guestSignup;\n    const currentChannel = this.state.currentChannel;\n\n    try {\n      const guestInfo = await axios.post(`${API_URL}/auth/guest`, {\n        guestInputName\n      });\n      cookies.set('guestToken', guestInfo.data.token, {\n        path: \"/\",\n        maxAge: 7200\n      });\n      cookies.set('guestUser', guestInfo.data.guestUser.guest.guestName, {\n        path: \"/\",\n        maxAge: 7200\n      });\n      this.setState({\n        guestUsername: guestInfo.data.guestUser.guest.guestName,\n        token: guestInfo.data.token,\n        loginError: [],\n        guestSignup: \"\",\n        formsMethod: \"\",\n        formsShown: false\n      }, () => {\n        // Tells backend sockets that a new user has entered the channel\n        socket.emit('enter channel', currentChannel, this.setUsername());\n      });\n    } catch (error) {\n      const guestError = Array.from(this.state.loginError);\n      guestError.push(error);\n      this.setState({\n        loginError: guestError\n      });\n    }\n  } // GET calls to backend API with the given current channel name.\n  // responds back with all the conversations in that given channel\n\n\n  // When the component unmounts, we detach all the listeners and give the server sockets a leave channel signal\n  componentWillUnmount() {\n    const currentChannel = this.state.currentChannel;\n    socket.emit('leave channel', currentChannel, this.setUsername());\n    socket.off('refresh messages');\n    socket.off('user joined');\n    socket.off('user left');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chatapp__container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, React.createElement(Navigation, Object.assign({\n      displayForms: this.displayForms,\n      userLogout: this.userLogout,\n      closeForm: this.closeForm\n    }, this.state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    })), this.state.formsMethod === \"login\" && this.state.formsShown ? React.createElement(LoginForm, Object.assign({\n      userLogin: this.userLogin,\n      closeForm: this.closeForm\n    }, this.state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    })) : null, this.state.formsMethod === \"register\" && this.state.formsShown ? React.createElement(RegisterForm, Object.assign({\n      userRegistration: this.userRegistration,\n      closeForm: this.closeForm\n    }, this.state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    })) : null, this.state.formsMethod === \"guest\" ? React.createElement(ChatSelector, Object.assign({\n      handleChange: this.handleChange,\n      guestLogin: this.guestLogin\n    }, this.state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    })) : null, this.state.id || this.state.guestUsername ? React.createElement(ChatBox, Object.assign({\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit,\n      createChannel: this.createChannel,\n      removeChannel: this.removeChannel,\n      startConversation: this.startConversation,\n      leaveConversation: this.leaveConversation,\n      joinChannel: this.joinChannel,\n      choosePrivateMessageRecipient: this.choosePrivateMessageRecipient,\n      getUsersConversations: this.getUsersConversations,\n      hasToken: this.hasToken\n    }, this.state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    })) : null, Object.getOwnPropertyNames(this.state.currentPrivateRecipient).length !== 0 ? React.createElement(PrivateMessagingContainer, {\n      usersDirectMessages: this.state.usersDirectMessages,\n      closePM: this.closePM,\n      currentPrivateRecipient: this.state.currentPrivateRecipient,\n      token: this.state.token,\n      username: this.state.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nChatUIContainer.propTypes = {\n  username: PropTypes.string,\n  id: PropTypes.string,\n  loginError: PropTypes.array,\n  registrationError: PropTypes.array,\n  formsShown: PropTypes.bool,\n  formsMethod: PropTypes.string,\n  chatsShown: PropTypes.bool,\n  composedMessage: PropTypes.string,\n  currentChannel: PropTypes.string,\n  conversations: PropTypes.array,\n  channelConversations: PropTypes.array,\n  guestSignup: PropTypes.string,\n  guestUsername: PropTypes.string,\n  socketConversations: PropTypes.array,\n  usersChannels: PropTypes.array,\n  createInput: PropTypes.string,\n  startDmInput: PropTypes.string,\n  usersDirectMessages: PropTypes.array,\n  directMessageErrorLog: PropTypes.array,\n  currentPrivateRecipient: PropTypes.object,\n  token: PropTypes.string\n};\nexport default withCookies(ChatUIContainer);","map":{"version":3,"sources":["C:/Users/chris/OneDrive/Desktop/chat final/src/components/container/ChatUIContainer.js"],"names":["React","Component","PropTypes","LoginForm","RegisterForm","withCookies","axios","Navigation","ChatBox","ChatSelector","io","Moment","PrivateMessagingContainer","API_URL","SOCKET_URL","socket","ChatUIContainer","constructor","initSocket","setState","on","data","newSocketConversations","Array","from","state","socketConversations","push","userJoined","hasToken","cookies","props","token","get","guestToken","tokenUser","tokenGuestUser","usersChannels","currentChannel","username","guestUsername","guestSignup","id","_id","formsMethod","formsShown","setUsername","userLogout","remove","path","emit","userRegistration","password","post","then","res","set","maxAge","user","registrationError","catch","error","errorLog","length","getChannelConversations","channelConversations","channelMessages","console","log","getUsersConversations","headers","Authorization","updatedUsersDirectMessages","conversationsWith","usersDirectMessages","err","sendMessage","composedMessage","recipient","socketMsg","channel","author","date","format","handleChange","event","target","name","value","handleSubmit","e","preventDefault","createChannel","createInput","updatedUsersChannels","removeChannel","updatedChannels","joinChannel","startConversation","startDmInput","checkForCurrentConvos","filter","directMessage","newUsersDirectMessages","recipientId","directMessageErrorLog","updatedErrorLog","response","leaveConversation","conversationId","directMessages","newDirectMessages","choosePrivateMessageRecipient","currentPrivateRecipient","displayForms","method","loginError","closeForm","closePM","stopPropagation","userLogin","bind","guestLogin","chatsShown","conversations","componentDidMount","componentDidUpdate","prevProps","prevState","userData","guestInputName","guestInfo","guestUser","guest","guestName","guestError","componentWillUnmount","off","render","Object","getOwnPropertyNames","propTypes","string","array","bool","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LoginForm from '../LoginForm';\r\nimport RegisterForm from '../RegisterForm';\r\nimport { withCookies } from 'react-cookie'\r\nimport axios from 'axios';\r\nimport Navigation from '../Navigation';\r\nimport ChatBox from '../ChatBox';\r\nimport ChatSelector from '../ChatSelector';\r\nimport io from 'socket.io-client';\r\nimport Moment from 'moment';\r\nimport PrivateMessagingContainer from './PrivateMessageContainer';\r\n\r\n\r\nconst API_URL = 'http://localhost:3000/api';\r\nconst SOCKET_URL = \"http://localhost:3000\";\r\nconst socket = io(SOCKET_URL);\r\n\r\nclass ChatUIContainer extends Component {\r\n  constructor(){\r\n    super();\r\n    \r\n    this.userLogin = this.userLogin.bind(this);\r\n    this.guestLogin = this.guestLogin.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      id: \"\",\r\n      loginError: [],\r\n      registrationError: [],\r\n      formsShown: false,\r\n      formsMethod: \"guest\",\r\n      chatsShown: false,\r\n      socket: null,\r\n      composedMessage: \"\",\r\n      currentChannel: \"Tavrn\",\r\n      conversations: [],\r\n      channelConversations: [],\r\n      guestSignup: \"\",\r\n      guestUsername: \"\",\r\n      socketConversations: [],\r\n      usersChannels: [],\r\n      createInput: \"\",\r\n      startDmInput: \"\",\r\n      usersDirectMessages:[],\r\n      directMessageErrorLog: [],\r\n      currentPrivateRecipient: {},\r\n      token:\"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Logs user or guest in if they have a token after refreshing or revisiting page.\r\n    this.hasToken();\r\n\r\n    // Initialize the socket listeners for events from the backend\r\n    this.initSocket();\r\n\r\n    // Get current channels messages\r\n    this.getChannelConversations();\r\n  }\r\n\r\n  // Sets up socket listeners to listen for when to refresh messages, when a new user has joined,\r\n  // or when a user has left the channel\r\n  initSocket = () => {\r\n    this.setState({\r\n        socket\r\n      })\r\n\r\n    socket.on('refresh messages', (data) => {\r\n      const newSocketConversations = Array.from(this.state.socketConversations);\r\n      \r\n      newSocketConversations.push(data)\r\n\r\n      this.setState({\r\n        socketConversations: newSocketConversations\r\n      })\r\n    });\r\n\r\n    socket.on('user joined', data => {\r\n      const userJoined = Array.from(this.state.socketConversations);\r\n\r\n      userJoined.push({\r\n        userJoined: data\r\n      })\r\n\r\n      this.setState({\r\n        socketConversations: userJoined\r\n      })\r\n    });\r\n\r\n    socket.on('user left', data => {\r\n      const userJoined = Array.from(this.state.socketConversations);\r\n      \r\n      userJoined.push({\r\n        userJoined: data\r\n      });\r\n\r\n      this.setState({\r\n        socketConversations: userJoined\r\n      }); \r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Tells socket when a user has left channel by comparing against previous and new channel states\r\n    if (prevState.currentChannel !== this.state.currentChannel) {\r\n      socket.emit('leave channel', prevState.currentChannel, this.setUsername())\r\n    }\r\n  }\r\n\r\n  // If a token can be found, it will populate back the user's information on browser refresh\r\n  hasToken = () => {\r\n    const { cookies } = this.props;\r\n    const token = cookies.get('token');\r\n    const guestToken = cookies.get('guestToken');\r\n    const tokenUser = cookies.get('user');\r\n    const tokenGuestUser = cookies.get('guestUser');\r\n    const usersChannels = cookies.get('usersChannels');\r\n    const currentChannel = cookies.get('channel');\r\n\r\n    if (token) {\r\n      this.setState({\r\n        username: tokenUser.username,\r\n        guestUsername: \"\",\r\n        guestSignup: \"\",\r\n        id: tokenUser._id,\r\n        token,\r\n        usersChannels,\r\n        currentChannel: currentChannel || \"Public-Main\",\r\n        formsMethod:\"\",\r\n        formsShown: false\r\n      });\r\n    } else if (guestToken) {\r\n      this.setState({\r\n        guestUsername: tokenGuestUser,\r\n        token: guestToken,\r\n        formsMethod: \"\",\r\n        formsShown: false\r\n      });\r\n    }\r\n  };\r\n\r\n  // Checks username, then return whether it current is a username or guestname\r\n  setUsername = () => {\r\n    const username = this.state.username;\r\n    const guestUsername = this.state.guestUsername;\r\n\r\n    if (!username) {\r\n      return guestUsername\r\n    } else {\r\n      return username\r\n    }\r\n  }\r\n\r\n  // Takes a username and password\r\n  // POST calls to the backend api with that information\r\n  // If the login is successful, cookies are set with the token, user's data, and their channels\r\n  async userLogin({ username, password }) {\r\n    const { cookies } = this.props;\r\n    const currentChannel = this.state.currentChannel;  \r\n    \r\n    try {\r\n      const userData = await axios.post(`${API_URL}/auth/login`, { username, password });\r\n      cookies.set('token', userData.data.token, { path: \"/\", maxAge: 7200 });\r\n      cookies.set('user', userData.data.user, { path: \"/\", maxAge: 7200 });\r\n      cookies.set('usersChannels', userData.data.user.usersChannels, { path: \"/\", maxAge: 7200 });\r\n      \r\n      this.setState({\r\n        guestUsername:\"\",\r\n        username: userData.data.user.username,\r\n        formsShown: false,\r\n        token: userData.data.token,\r\n        id: userData.data.user._id,\r\n        loginError:[],\r\n        guestSignup: \"\",\r\n        usersChannels: userData.data.user.usersChannels,\r\n        formsMethod:\"\",\r\n      }, () => {\r\n        // After the login state is set, tell the backend sockets that a new user has entered\r\n        socket.emit('enter channel', currentChannel, this.setUsername());   \r\n      });\r\n    } catch(error) {\r\n        const errorLog = Array.from(this.state.loginError);\r\n      \r\n        // Always show most recent errors\r\n        errorLog.length = [];\r\n        errorLog.push(error);\r\n  \r\n        this.setState({\r\n          loginError: errorLog\r\n        });\r\n    }\r\n  }\r\n\r\n  // On logout, remove all cookies that were saved and emit to the backend socket listener\r\n  // that a user has left the current channel.\r\n  // Sets the state back to fresh\r\n  userLogout = () => {\r\n    const { cookies } = this.props;\r\n    const currentChannel = this.state.currentChannel;\r\n    cookies.remove('token', { path: '/' });\r\n    cookies.remove('user', { path: '/' });\r\n    cookies.remove('guestToken', { path: \"/\" });\r\n    cookies.remove('guestUser', { path: \"/\" });\r\n    cookies.remove('usersChannels', { path: \"/\" });\r\n    cookies.remove('channel', { path: \"/\" });\r\n    \r\n    socket.emit('leave channel', currentChannel, this.setUsername())      \r\n    \r\n    this.setState({\r\n      username: \"\",\r\n      id: \"\",\r\n      guestUsername: \"\",\r\n      token: \"\",\r\n      usersChannels: [],\r\n      socketConversations: [],\r\n      guestSignup: \"\",      \r\n      currentChannel: \"Public-Main\",\r\n      formsMethod: \"login\",\r\n      formsShown: true\r\n    });\r\n  }\r\n\r\n  // Takes a username and password, then makes a POST call to our api which returns a token and that user's info\r\n  // Then sets cookies of the given token, user data, and users channels\r\n  userRegistration = ({ username, password }) => {\r\n    const { cookies } = this.props;\r\n    const currentChannel = this.state.currentChannel;\r\n\r\n    axios.post(`${API_URL}/auth/register`, { username, password })\r\n    .then(res => {\r\n      cookies.set('token', res.data.token, { path: \"/\", maxAge: 7200 })\r\n      cookies.set('user', res.data.user, { path: \"/\", maxAge: 7200 })\r\n      cookies.set('usersChannels', res.data.user.usersChannels, { path: \"/\", maxAge: 7200 })\r\n\r\n      this.setState({\r\n        username: res.data.user.username,\r\n        id: res.data.user._id,\r\n        registrationError:[],\r\n        token:res.data.token,\r\n        formsShown: false,\r\n        guestUsername:\"\",\r\n        guestSignup: \"\",       \r\n        usersChannels: res.data.user.usersChannels,\r\n        formsMethod:\"\"\r\n      }, () => {\r\n        // Tells the backend sockets that a user has entered a channel\r\n        socket.emit('enter channel', currentChannel, this.setUsername());           \r\n      });\r\n    })\r\n    .catch(error => {\r\n      // Always show most recent errors\r\n      const errorLog = Array.from(this.state.registrationError);\r\n\r\n      errorLog.length = [];\r\n      errorLog.push(error);\r\n\r\n      this.setState({\r\n        registrationError: errorLog\r\n      });\r\n    });\r\n  }\r\n\r\n  // Guest signup, on successful POST call to our api, it returns a token and guest's data\r\n  // Saves the token and guestname as cookies \r\n  async guestLogin(e) {\r\n    e.preventDefault();\r\n    const { cookies } = this.props;\r\n    const guestInputName = this.state.guestSignup;\r\n    const currentChannel = this.state.currentChannel;\r\n    \r\n    try {\r\n      const guestInfo = await axios.post(`${API_URL}/auth/guest`, { guestInputName })\r\n\r\n      cookies.set('guestToken', guestInfo.data.token, { path: \"/\", maxAge: 7200 })\r\n      cookies.set('guestUser', guestInfo.data.guestUser.guest.guestName, { path: \"/\", maxAge: 7200 })\r\n\r\n      this.setState({\r\n        guestUsername: guestInfo.data.guestUser.guest.guestName,\r\n        token: guestInfo.data.token,\r\n        loginError: [],\r\n        guestSignup: \"\",\r\n        formsMethod: \"\",\r\n        formsShown: false,\r\n      }, () => {\r\n        // Tells backend sockets that a new user has entered the channel\r\n        socket.emit('enter channel', currentChannel, this.setUsername());           \r\n      })      \r\n    } catch(error) {\r\n      const guestError = Array.from(this.state.loginError);\r\n\r\n      guestError.push(error);\r\n\r\n      this.setState({\r\n        loginError: guestError\r\n      })\r\n    }\r\n  }\r\n\r\n  // GET calls to backend API with the given current channel name.\r\n  // responds back with all the conversations in that given channel\r\n  getChannelConversations = () => {\r\n    axios.get(`${API_URL}/chat/channel/${this.state.currentChannel}`)\r\n    .then(res => {\r\n      const currentChannel = this.state.currentChannel;\r\n  \r\n      socket.emit('enter channel', currentChannel, this.setUsername());\r\n\r\n      this.setState({\r\n        channelConversations: res.data.channelMessages\r\n      });\r\n    })\r\n    .catch(error => {\r\n      console.log(error)\r\n    })\r\n  }\r\n\r\n  // GET call to the backend api with the token given from login in the header.\r\n  // this returns a list of all the user's active conversations\r\n  getUsersConversations = () => {\r\n    axios.get(`${API_URL}/chat`, {\r\n      headers: { Authorization: this.state.token }\r\n    })\r\n    .then(res => {\r\n      const updatedUsersDirectMessages = res.data.conversationsWith;\r\n\r\n      this.setState({\r\n        usersDirectMessages: updatedUsersDirectMessages || []\r\n      });\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    });\r\n  }\r\n\r\n  // Takes a message and recipient, then makes a POST call with the message in the body of the call\r\n  // as well as the token given on login in the header.\r\n  // On successful post call, the message is saved to mongodb\r\n  // This then emits to the socket listeners on the server that a message was sent,\r\n  // which returns a refresh message message for us to get updated messages from the mongodb.\r\n  sendMessage = (composedMessage, recipient) => {\r\n    const socket = this.state.socket;\r\n    const currentChannel = this.state.currentChannel;\r\n\r\n    axios.post(`${API_URL}/chat/postchannel/${this.state.currentChannel}`, { composedMessage }, {\r\n      headers: { Authorization: this.state.token }\r\n    })\r\n    .then(res => {\r\n      const socketMsg = {\r\n        composedMessage,\r\n        channel: currentChannel,\r\n        author: this.state.guestUsername || this.state.username,\r\n        date: Moment().format()\r\n      }\r\n      socket.emit('new message', socketMsg)\r\n\r\n      this.setState({\r\n        composedMessage: \"\"\r\n      })\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n  \r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.sendMessage(this.state.composedMessage);\r\n  }\r\n\r\n  // Takes a channel name and then makes a POST call to the backend API,\r\n  // requires a token for authorization to create a channel.\r\n  // On success, the new array is pushed into the user's current user channel,\r\n  // and saves the new channel list in cookie and refreshes channel conversations.\r\n  createChannel = (e) => {\r\n    const { cookies } = this.props;\r\n    const createInput = this.state.createInput;\r\n    e.preventDefault();\r\n\r\n    axios.post(`${API_URL}/user/addchannel`, { createInput }, {\r\n      headers: { Authorization: this.state.token }\r\n    })\r\n    .then(res => {      \r\n      const updatedUsersChannels = Array.from(this.state.usersChannels);\r\n\r\n      updatedUsersChannels.push(this.state.createInput);\r\n\r\n      cookies.set('usersChannels', updatedUsersChannels, { path: \"/\", maxAge: 7200 });\r\n\r\n      this.setState({\r\n        socketConversations:[],\r\n        currentChannel: createInput,\r\n        usersChannels: updatedUsersChannels\r\n      }, () => {this.getChannelConversations()})\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  // Takes a channel name parameter, then a POST call with authorization token to backend API,\r\n  // On success, cookies are set of the updated user channels \r\n  removeChannel = (channel) => {   \r\n    const { cookies } = this.props;\r\n    \r\n    axios.post(`${API_URL}/user/removechannel`, { channel }, {\r\n      headers: { Authorization: this.state.token }\r\n    })\r\n    .then(res => {\r\n      const updatedChannels = res.data.updatedChannels;\r\n\r\n      cookies.set('usersChannels', updatedChannels, { path: \"/\", maxAge: 7200 });\r\n      \r\n      this.joinChannel(\"Tavrn\");\r\n      this.setState({\r\n        socketConversations: [],        \r\n        usersChannels: updatedChannels\r\n      })\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  // Takes a channel name parameter, saves it as a cookie, then sets the state of current channel,\r\n  // to that channel paramter.\r\n  joinChannel = (channel) => {\r\n    const { cookies } = this.props;\r\n\r\n    cookies.set('channel', channel, { path: \"/\", maxAge: 7200 });\r\n    \r\n    this.setState({\r\n      socketConversations: [],      \r\n      currentChannel: channel\r\n    }, () => {this.getChannelConversations()})\r\n  }\r\n\r\n  // Takes the input and checks against user's conversation to see if their are duplicates,\r\n  // On success, a POST call is made with the message\r\n  startConversation = (e) => {\r\n    const startDmInput = this.state.startDmInput;\r\n    const usersDirectMessages = this.state.usersDirectMessages;\r\n    e.preventDefault();\r\n\r\n    const checkForCurrentConvos = usersDirectMessages.filter(directMessage => {\r\n      return directMessage.username === startDmInput\r\n    })\r\n\r\n    // Checks if already in current conversation with that person\r\n    if (!checkForCurrentConvos.length || !usersDirectMessages.length) {\r\n      axios.post(`${API_URL}/chat/new`, { startDmInput }, {\r\n        headers: { Authorization: this.state.token }\r\n      })\r\n      .then(res => {\r\n        const newUsersDirectMessages = Array.from(this.state.usersDirectMessages)\r\n        \r\n        newUsersDirectMessages.push({\r\n          username: res.data.recipient,\r\n          _id: res.data.recipientId,\r\n        })\r\n        \r\n        this.setState({\r\n          usersDirectMessages: newUsersDirectMessages,\r\n          directMessageErrorLog: []\r\n        })\r\n      })\r\n      .catch(err => {\r\n        const updatedErrorLog = Array.from(this.state.directMessageErrorLog);\r\n\r\n        updatedErrorLog.push(err);\r\n\r\n        this.setState({\r\n          directMessageErrorLog: updatedErrorLog\r\n        })\r\n\r\n      })\r\n    } else {\r\n      const updatedErrorLog = Array.from(this.state.directMessageErrorLog);\r\n\r\n      updatedErrorLog.push({\r\n        //Had to emulate response from backend for error the alert component\r\n        response:{\r\n          data: {\r\n            error: 'Already in conversation with that person.'\r\n          }\r\n        }\r\n      });\r\n\r\n      this.setState({\r\n        directMessageErrorLog: updatedErrorLog\r\n      })\r\n    }\r\n  }\r\n\r\n  // Takes a conversation id and user parameter\r\n  // POST calls with the conversation id to the backend\r\n  // On success, it removes that conversation from the users data\r\n  // then alter the current conversations state to reflect the new change, so we dont need to refresh.\r\n  leaveConversation = (conversationId, user) => {\r\n    axios.post(`${API_URL}/chat/leave`, {conversationId}, {\r\n      headers: { Authorization: this.state.token }\r\n    })\r\n    .then(res => {\r\n      const directMessages = Array.from(this.state.usersDirectMessages);\r\n\r\n      const newDirectMessages = directMessages.filter((directMessages) => {\r\n        return directMessages.username !== user\r\n      })\r\n\r\n      this.setState({\r\n        usersDirectMessages: newDirectMessages\r\n      })\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  choosePrivateMessageRecipient = (recipient) => {\r\n    this.setState({\r\n      currentPrivateRecipient: recipient\r\n    })\r\n  }\r\n\r\n  // Depending on the parameter, different pages are shown\r\n  // The Login, Register or the Guest sign up page. \r\n  displayForms = (method) => {\r\n    if (method === \"login\") {\r\n      this.setState({\r\n        loginError: [],\r\n        formsMethod: \"login\",\r\n        formsShown: true,\r\n        guestUsername: \"\"\r\n      });\r\n    }\r\n\r\n    if (method === \"register\") {\r\n      this.setState({\r\n        formsMethod: \"register\",\r\n        formsShown: true,\r\n        guestUsername: \"\"\r\n      });\r\n    }\r\n\r\n    if (method === \"close\") {\r\n      this.setState({\r\n        formsMethod: \"\",\r\n        formsShown: false\r\n      });\r\n    }\r\n  }\r\n\r\n  closeForm = () => {\r\n    this.setState({\r\n      formsMethod: \"guest\",\r\n      formsShown: false\r\n    });\r\n  }\r\n\r\n  closePM = (e) => {\r\n    e.stopPropagation();\r\n    this.setState({\r\n      currentPrivateRecipient: {}\r\n    })\r\n  }\r\n\r\n  // When the component unmounts, we detach all the listeners and give the server sockets a leave channel signal\r\n  componentWillUnmount() {\r\n    const currentChannel = this.state.currentChannel;\r\n\r\n    socket.emit('leave channel', currentChannel, this.setUsername());\r\n    socket.off('refresh messages');\r\n    socket.off('user joined');\r\n    socket.off('user left');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"chatapp__container\">\r\n        <Navigation\r\n          displayForms={this.displayForms}\r\n          userLogout={this.userLogout} \r\n          closeForm={this.closeForm}\r\n          {...this.state}\r\n        />\r\n          {\r\n            (this.state.formsMethod === \"login\" && this.state.formsShown)\r\n              ?   <LoginForm \r\n                    userLogin={this.userLogin}\r\n                    closeForm={this.closeForm}\r\n                    {...this.state}\r\n                  />\r\n              : null\r\n          }\r\n          {\r\n            (this.state.formsMethod === \"register\" && this.state.formsShown)\r\n              ?  <RegisterForm \r\n                    userRegistration={this.userRegistration}\r\n                    closeForm={this.closeForm}\r\n                    {...this.state}\r\n                 />\r\n              : null\r\n          }\r\n          {\r\n            (this.state.formsMethod === \"guest\")\r\n              ? <ChatSelector \r\n                  handleChange={this.handleChange}\r\n                  guestLogin={this.guestLogin}\r\n                  {...this.state}\r\n                />\r\n              : null\r\n          }\r\n        {\r\n          (this.state.id || this.state.guestUsername)\r\n            ? <ChatBox \r\n                handleChange={this.handleChange}\r\n                handleSubmit={this.handleSubmit}\r\n                createChannel={this.createChannel}\r\n                removeChannel={this.removeChannel}\r\n                startConversation={this.startConversation}\r\n                leaveConversation={this.leaveConversation}\r\n                joinChannel={this.joinChannel}\r\n                choosePrivateMessageRecipient={this.choosePrivateMessageRecipient}\r\n                getUsersConversations={this.getUsersConversations}\r\n                hasToken={this.hasToken}\r\n                {...this.state}\r\n              />\r\n            : null\r\n        }\r\n        {\r\n          (Object.getOwnPropertyNames(this.state.currentPrivateRecipient).length !== 0)\r\n            ? <PrivateMessagingContainer \r\n                usersDirectMessages={this.state.usersDirectMessages}\r\n                closePM={this.closePM}\r\n                currentPrivateRecipient={this.state.currentPrivateRecipient}\r\n                token={this.state.token}\r\n                username={this.state.username}\r\n               />\r\n               \r\n            : null\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nChatUIContainer.propTypes = {\r\n  username: PropTypes.string,\r\n  id: PropTypes.string,\r\n  loginError: PropTypes.array,\r\n  registrationError: PropTypes.array,\r\n  formsShown: PropTypes.bool,\r\n  formsMethod: PropTypes.string,\r\n  chatsShown: PropTypes.bool,\r\n  composedMessage: PropTypes.string,\r\n  currentChannel: PropTypes.string,\r\n  conversations: PropTypes.array,\r\n  channelConversations: PropTypes.array,\r\n  guestSignup: PropTypes.string,\r\n  guestUsername: PropTypes.string,\r\n  socketConversations: PropTypes.array,\r\n  usersChannels: PropTypes.array,\r\n  createInput: PropTypes.string,\r\n  startDmInput: PropTypes.string,\r\n  usersDirectMessages:PropTypes.array,\r\n  directMessageErrorLog: PropTypes.array,\r\n  currentPrivateRecipient: PropTypes.object,\r\n  token:PropTypes.string\r\n}\r\n\r\nexport default withCookies(ChatUIContainer);"]},"metadata":{},"sourceType":"module"}