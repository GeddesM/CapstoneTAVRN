{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\OneDrive\\\\Desktop\\\\chat final\\\\src\\\\components\\\\container\\\\PrivateMessageContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PrivateMessaging from '../PrivateMessaging';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nconst SOCKET_URL = \"http://localhost:3000\";\nconst socket = io(SOCKET_URL);\nconst API_URL = 'http://localhost:3000/api';\nexport default class PrivateMessagingContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePrivateInput = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handlePrivateSubmit = e => {\n      e.preventDefault();\n      this.sendPrivateMessage();\n    };\n\n    this.sendPrivateMessage = () => {\n      const privateMessageInput = this.state.privateMessageInput;\n      const recipientId = this.props.currentPrivateRecipient._id;\n      axios.post(`${API_URL}/chat/reply`, {\n        privateMessageInput,\n        recipientId\n      }, {\n        headers: {\n          Authorization: this.props.token\n        }\n      }).then(res => {\n        const socketMsg = {\n          body: privateMessageInput,\n          conversationId: this.state.conversationId,\n          author: [{\n            item: {\n              username: this.props.username\n            }\n          }]\n        };\n        socket.emit('new privateMessage', socketMsg);\n        this.setState({\n          privateMessageInput: \"\"\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.getPrivateMessages = () => {\n      const currentPrivateRecipient = this.props.currentPrivateRecipient;\n      axios.get(`${API_URL}/chat/privatemessages/${currentPrivateRecipient._id}`, {\n        headers: {\n          Authorization: this.props.token\n        }\n      }).then(res => {\n        socket.emit('enter privateMessage', res.data.conversationId);\n        this.setState({\n          privateMessageLog: res.data.conversation || [],\n          conversationId: res.data.conversationId\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.userTyping = isTyping => {\n      const conversationId = this.state.conversationId;\n      const username = this.props.username;\n      const data = {\n        isTyping,\n        conversationId,\n        username\n      };\n      socket.emit('user typing', data);\n    };\n\n    this.state = {\n      privateMessageInput: \"\",\n      privateMessageLog: [],\n      conversationId: \"\",\n      socketPMs: [],\n      currentPrivateRecipient: this.props.currentPrivateRecipient,\n      showTyping: false,\n      activeUserTyping: \"\"\n    };\n  }\n\n  // On different recipients, it will get new private messages.\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      currentPrivateRecipient: nextProps.currentPrivateRecipient\n    }, () => {\n      this.getPrivateMessages();\n    });\n  } // On mount, it gets private messages, and adds socket listeners for new private messages.\n\n\n  componentDidMount() {\n    this.getPrivateMessages();\n    socket.on('refresh privateMessages', data => {\n      const updatedSocketPMs = Array.from(this.state.socketPMs);\n      updatedSocketPMs.push(data);\n      this.setState({\n        socketPMs: updatedSocketPMs\n      });\n    });\n    socket.on('typing', data => {\n      this.setState({\n        showTyping: data.isTyping,\n        activeUserTyping: data.username\n      });\n    });\n  } // Removes socket listeners and tells sever sockets the user has left that private room.\n\n\n  componentWillUnmount() {\n    socket.emit('leave privateMessage', this.state.conversationId);\n    socket.off('refresh privateMessages');\n    socket.off('typing');\n  }\n\n  render() {\n    const {\n      closePM\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"private__message--container\",\n      onClick: e => {\n        closePM(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(PrivateMessaging, Object.assign({\n      handlePrivateInput: this.handlePrivateInput,\n      handlePrivateSubmit: this.handlePrivateSubmit,\n      userTyping: this.userTyping\n    }, this.props, this.state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })));\n  }\n\n}\nPrivateMessagingContainer.propTypes = {\n  privateMessageInput: PropTypes.string,\n  privateMessageLog: PropTypes.array,\n  conversationId: PropTypes.string,\n  socketPMs: PropTypes.array,\n  currentPrivateRecipient: PropTypes.object,\n  showTyping: PropTypes.bool,\n  activeUserTyping: PropTypes.string\n};","map":{"version":3,"sources":["C:/Users/chris/OneDrive/Desktop/chat final/src/components/container/PrivateMessageContainer.js"],"names":["React","Component","PropTypes","PrivateMessaging","axios","io","SOCKET_URL","socket","API_URL","PrivateMessagingContainer","constructor","props","handlePrivateInput","event","setState","target","name","value","handlePrivateSubmit","e","preventDefault","sendPrivateMessage","privateMessageInput","state","recipientId","currentPrivateRecipient","_id","post","headers","Authorization","token","then","res","socketMsg","body","conversationId","author","item","username","emit","catch","err","console","log","getPrivateMessages","get","data","privateMessageLog","conversation","userTyping","isTyping","socketPMs","showTyping","activeUserTyping","componentWillReceiveProps","nextProps","componentDidMount","on","updatedSocketPMs","Array","from","push","componentWillUnmount","off","render","closePM","propTypes","string","array","object","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport PrivateMessaging from '../PrivateMessaging';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\n\r\nconst SOCKET_URL = \"http://localhost:3000\";\r\nconst socket = io(SOCKET_URL);\r\nconst API_URL = 'http://localhost:3000/api';\r\n\r\nexport default class PrivateMessagingContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      privateMessageInput: \"\",\r\n      privateMessageLog: [],\r\n      conversationId: \"\",\r\n      socketPMs: [],\r\n      currentPrivateRecipient: this.props.currentPrivateRecipient,\r\n      showTyping: false,\r\n      activeUserTyping: \"\"\r\n    }\r\n  }\r\n\r\n  handlePrivateInput = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  handlePrivateSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.sendPrivateMessage();\r\n  }\r\n\r\n  // Makes a POST call with a private message and a recipient id to save a message.\r\n  // On success, it emits to the server sockets, a socketMsg object containing what is sent to mongodb, so it can\r\n  // send that information to the recipient if they are connected.\r\n  sendPrivateMessage = () => {\r\n    const privateMessageInput = this.state.privateMessageInput;\r\n    const recipientId = this.props.currentPrivateRecipient._id;\r\n\r\n    axios.post(`${API_URL}/chat/reply`, { privateMessageInput, recipientId }, {\r\n      headers: { Authorization: this.props.token }\r\n    })\r\n    .then(res => {\r\n      const socketMsg = {\r\n        body: privateMessageInput,\r\n        conversationId: this.state.conversationId,\r\n        author:[{\r\n          item:{\r\n            username: this.props.username\r\n          }\r\n        }]\r\n      }\r\n      socket.emit('new privateMessage', socketMsg);\r\n\r\n      this.setState({\r\n        privateMessageInput: \"\"\r\n      })\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  // Takes the current private recipient and makes a POST call taking the recipient id.\r\n  // On success, it joins the user into a socket room with the conversation id returned as the room name.\r\n  // Takes the response from the backend and sets the state with the conversation logs.\r\n  getPrivateMessages = () => {\r\n    const currentPrivateRecipient = this.props.currentPrivateRecipient;\r\n\r\n    axios.get(`${API_URL}/chat/privatemessages/${currentPrivateRecipient._id}`, {\r\n      headers: { Authorization: this.props.token }\r\n    })\r\n    .then(res => {\r\n      socket.emit('enter privateMessage', res.data.conversationId)\r\n      this.setState({\r\n        privateMessageLog: res.data.conversation || [],\r\n        conversationId: res.data.conversationId\r\n      })\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  // Tells the socket when a user is current typing.\r\n  // Sends the conversation id and username to display who is typing.\r\n  userTyping = (isTyping) => {\r\n    const conversationId = this.state.conversationId;\r\n    const username = this.props.username;\r\n    const data = {\r\n      isTyping,\r\n      conversationId,\r\n      username\r\n    }\r\n    socket.emit('user typing', data)\r\n  }\r\n\r\n  // On different recipients, it will get new private messages.\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({\r\n      currentPrivateRecipient: nextProps.currentPrivateRecipient\r\n    }, () => {\r\n      this.getPrivateMessages()\r\n    })\r\n  }\r\n\r\n  // On mount, it gets private messages, and adds socket listeners for new private messages.\r\n  componentDidMount() {\r\n    this.getPrivateMessages();\r\n\r\n    socket.on('refresh privateMessages', (data) => {\r\n      const updatedSocketPMs = Array.from(this.state.socketPMs);\r\n\r\n      updatedSocketPMs.push(data);\r\n\r\n      this.setState({\r\n        socketPMs: updatedSocketPMs\r\n      })\r\n    });\r\n\r\n    socket.on('typing', (data) => {\r\n\r\n      this.setState({\r\n        showTyping: data.isTyping,\r\n        activeUserTyping: data.username\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  // Removes socket listeners and tells sever sockets the user has left that private room.\r\n  componentWillUnmount() {\r\n    socket.emit('leave privateMessage', this.state.conversationId);\r\n    socket.off('refresh privateMessages');\r\n    socket.off('typing'); \r\n  }\r\n\r\n  render() {\r\n    const { closePM } = this.props;\r\n    return (\r\n      <div className=\"private__message--container\" onClick={(e) => {closePM(e)}}>\r\n        <PrivateMessaging\r\n          handlePrivateInput={this.handlePrivateInput} \r\n          handlePrivateSubmit={this.handlePrivateSubmit}\r\n          userTyping={this.userTyping}\r\n          {...this.props}\r\n          {...this.state}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nPrivateMessagingContainer.propTypes = {\r\n  privateMessageInput: PropTypes.string,\r\n  privateMessageLog: PropTypes.array,\r\n  conversationId: PropTypes.string,\r\n  socketPMs: PropTypes.array,\r\n  currentPrivateRecipient: PropTypes.object,\r\n  showTyping: PropTypes.bool,\r\n  activeUserTyping: PropTypes.string\r\n}"]},"metadata":{},"sourceType":"module"}